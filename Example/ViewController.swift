//
//  ViewController.swift
//  Example
//
//  Created by Pavel Moslienko on 4 –∞–ø—Ä. 2021¬†–≥..
//  Copyright ¬© 2021 moslienko. All rights reserved.
//

import UIKit
import CaseName

// MARK: - ViewController

/// The ViewController
class ViewController: UIViewController {
    
    // MARK: Properties
    
    /// The Label
    lazy var label: UILabel = {
        let label = UILabel()
        label.text = "üöÄ\nCaseName\nExample"
        label.font = .systemFont(ofSize: 25, weight: .semibold)
        label.numberOfLines = 0
        label.lineBreakMode = .byWordWrapping
        label.textAlignment = .center
        return label
    }()
    
    // MARK: View-Lifecycle
    
    /// View did load
    override func viewDidLoad() {
        super.viewDidLoad()
        self.view.backgroundColor = .white
        self.testingDemoData()
    }
    
    /// LoadView
    override func loadView() {
        self.view = self.label
    }
    
    private func testingDemoData() {
        let names = [
            ["–ò–≤–∞–Ω", "–ñ–∏–∑–µ–ª—å", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä", "–õ—é–±–æ–≤—å", "–ü–∞–≤–µ–ª", "–ê–ª–µ–∫—Å–µ–π", "–ú–∏—Ö–∞–∏–ª","–≠–ª–ª–∞", "–ê–ª–∏—Å–∞", "–ò–ª—å—è", "–ù–∞—Ç–∞–ª—å—è", "–ú–∞—Ä–∏—è"],
            ["–ü–µ—Ç—Ä", "–õ–µ–≤", "–ü–∞–≤–µ–ª", "–§—Ä–æ–ª"],
            ["–Æ–º–∞—à", "–ñ–æ—Ä–∂", "–§–µ—Ä–µ–Ω—Ü", "–ö–∞–∑–±–∏—á"],
            ["–ò–≥–æ—Ä—å", "–õ—é–±–æ–≤—å", "–í–∏–ª—å", "–†–∞—É–ª—å", "–®–∞–º–∏–ª—å", "–ü–µ—Ç—Ä—É—Å—å"],
            ["–ù–∏–∫–∏—Ç–∞", "–î–∞–Ω–∏–ª–∞", "–ö—É–∑—å–º–∞", "–ú—É—Å—Ç–∞—Ñ–∞"],
            ["–û–ª–µ—Å—è", "–î–∞—Ä—å—è", "–ò–ª—å—è"]
        ]
       
        let middleNames = ["–ï–≤–≥–µ–Ω—å–µ–≤–∏—á", "–í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞", "–ù–∏–∫–∏—Ç–∏—á"]
        
        self.demoName(names: names.randomElement() ?? [])
        self.demoMiddleName(names: middleNames)
        self.demoNumbers()
    }
}

extension ViewController {
    
    private func demoName(names:[String]) {        
        for name in names {
            print ("–ò.–ü: ",name)
            print ("–†.–ü: ",name.caseName().genitive)
            print ("–î.–ü: ",name.caseName().dative)
            print ("–í.–ü: ",name.caseName().accusative)
            print ("–¢.–ü: ",name.caseName().instrumental)
            print ("–ü.–ü: ",name.caseName().prepositional)
            
            print ("\n")
        }
    }
    
    private func demoMiddleName(names:[String]) {
        
        for name in names {
            print ("–ò.–ü: ",name)
            print ("–†.–ü: ",name.caseMiddleName().genitive)
            print ("–î.–ü: ",name.caseMiddleName().dative)
            print ("–í.–ü: ",name.caseMiddleName().accusative)
            print ("–¢.–ü: ",name.caseMiddleName().instrumental)
            print ("–ü.–ü: ",name.caseMiddleName().prepositional)
            
            print ("\n")
        }
    }
    
    private func demoNumbers() {
        for i in 1...100 {
            let value = String.caseWordEndingByCount(i, single: "–¥–µ–Ω—å", genitiveSingle: "–¥–Ω–µ–π", genitiveAny: "–¥–Ω—è")
            print("value - \(i) \(value)")
        }
        
    }
    
}
